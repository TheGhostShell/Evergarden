buildscript {
    ext {
        springBootVersion = "2.2.4.RELEASE"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins{
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id 'net.ltgt.apt' version '0.20'
    id 'org.unbroken-dome.test-sets' version '2.2.1'
    id "org.sonarqube" version "2.8"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'net.ltgt.apt-eclipse'

group = 'com.evergarden.cms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {url 'https://jitpack.io'}
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

sonarqube {
    properties {
        property 'sonar.coverage.jacoco.xmlReportsPath', './build/reports/jacoco/integ/, ./build/reports/jacoco/'
        property 'sonar.junit.reportPaths',	'./build/test-results/integtest, ./build/test-results/test'
        property 'sonar.sources',	"src/main/"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport

    reports.junitXml.enabled(true)
}



/*
task integrationTestOnly(type: Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
    include 'integrationTest/**'
    dependsOn compileTestJava
    mustRunAfter test
    jacoco {
        include 'integrationTest/**'
        // append = true

    }
}
*/

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled = true
        xml.setDestination(new File("${buildDir}/reports/jacoco/report.xml"))
    }

    getClassDirectories().setFrom(fileTree(dir: 'build/classes/java/main'))
    getSourceDirectories().setFrom(fileTree(dir: 'scr/main/java'))
}

jar {
    manifest {
        attributes "Main-Class": "com.evergarden.cms.CmsApplication"
    }
}

// Workaround for https://youtrack.jetbrains.com/issue/IDEA-182577
idea {
    module {
        sourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileJava.options.annotationProcessorGeneratedSourcesDirectory
        testSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
        generatedSourceDirs += compileTestJava.options.annotationProcessorGeneratedSourcesDirectory
    }
}

dependencies {
    // Eureka client
    // compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    //sdk
    implementation 'com.github.GostShell:sdk:v0.0.3.6-alpha'

    //rxjava-jdbc
    // compile 'com.github.davidmoten:rxjava2-jdbc:0.2.4'

    // Reactor Adapter (RxJava2, Akka Actors scheduler and more)
    compile "io.projectreactor.addons:reactor-adapter:3.2.0.RELEASE"

    //data db
    // compile("com.h2database:h2:1.4.197") // or developmentOnly

    // jwt lib
    compile 'com.auth0:java-jwt:3.6.0'

    //zip library to decompress zip archive
    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.3'

    //dev devtools
    developmentOnly("org.springframework.boot:spring-boot-devtools") //runtimeOnly ??

    //reactivedb no sql mongo
    compile("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")

    //MapStruct mapper
    implementation 'org.mapstruct:mapstruct:1.3.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'

    // sugar syntax and helper
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    //spring web-flux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    //implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    //testImplementation('org.springframework.security:spring-security-test')
    testImplementation('io.projectreactor:reactor-test')
    testCompile('org.junit.jupiter:junit-jupiter:5.4.0')

    // testContainer acceptance test
    testImplementation(group: 'org.testcontainers', name: 'testcontainers', version: '1.15.0-rc2')
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.14.3'


    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.1.2'
    testCompile group: 'io.rest-assured', name: 'rest-assured-all', version: '4.1.2'

    // caching
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    compile 'org.ehcache:ehcache:3.8.1'

    implementation 'javax.cache:cache-api'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'


    // Integrate spring shell or crash
    // Use neo4j to manage taxonomy system
    // Use elastic search to provide a search system embedded engine https://github.com/allegro/embedded-elasticsearch
    // For caching Ehcache JSR-107 “JCache” API or see https://spring.io/guides/gs/caching/
    // test integration w<ith flyway https://github.com/flyway/flyway-test-extensions/wiki/Usage-flyway-spring-test
}

sourceSets {
    integtest {

            compileClasspath += sourceSets.test.compileClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
            java.srcDir "$projectDir/src/integrationTest/java"
            resources.srcDir "$projectDir/src/test/resources"

    }
}

configurations {
    integtestCompile.extendsFrom testCompile
    integtestImplementation.extendsFrom(testImplementaion)
    integtestRuntime.extendsFrom(testRuntime)
}

task integtest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integtest.output.classesDirs
    classpath = sourceSets.integtest.runtimeClasspath

    dependsOn(compileJava)
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoIntegTest.exec")
    }
    jacocoTestReport {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/jacocoIntegTest.exec")
        reports.xml.enabled(true)
        reports.xml.setDestination(new File("${buildDir}/reports/jacoco/integ/report.xml"))
        getClassDirectories().setFrom(fileTree(dir: 'build/classes/java/main'))
        getSourceDirectories().setFrom(fileTree(dir: 'scr/main/java'))
    }
    finalizedBy jacocoTestReport
}
check.dependsOn(integtest)
project.tasks["sonarqube"].dependsOn "integtest"

/*testSets {
    integrationTest
}

tasks.withType(Test) {
    useJUnitPlatform()
}

check.dependsOn integrationTest*/

//	        			from spring initializr
// runtimeOnly('org.springframework.boot:spring-boot-devtools')


//dependencyManagement {
//    imports {
//        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.SR2'
//    }
//}